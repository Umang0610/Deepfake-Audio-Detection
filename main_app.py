{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyN31nyC1F1kuLfv4I2N0J6Q"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"pPvSe7kaJg1a"},"outputs":[],"source":["from flask import Flask, request, jsonify, render_template\n","import os\n","import librosa\n","import numpy as np\n","import tensorflow as tf\n","from werkzeug.utils import secure_filename\n","\n","# Initialize Flask app\n","app = Flask(__name__)\n","\n","# ✅ Ensure 'uploads' directory exists\n","UPLOAD_FOLDER = \"uploads\"\n","if not os.path.exists(UPLOAD_FOLDER):\n","    os.makedirs(UPLOAD_FOLDER)\n","\n","app.config[\"UPLOAD_FOLDER\"] = UPLOAD_FOLDER\n","ALLOWED_EXTENSIONS = {\"wav\", \"mp3\"}\n","\n","# ✅ Load the trained LSTM model\n","MODEL_PATH = \"lstm_model.h5\"\n","try:\n","    model = tf.keras.models.load_model(MODEL_PATH)\n","    print(\"✅ Model loaded successfully!\")\n","except Exception as e:\n","    print(f\"❌ Error loading model: {e}\")\n","\n","# ✅ Function to check allowed file type\n","def allowed_file(filename):\n","    return \".\" in filename and filename.rsplit(\".\", 1)[1].lower() in ALLOWED_EXTENSIONS\n","\n","# ✅ Function to extract MFCC features from an audio file\n","def preprocess_audio(file_path, max_length=500):\n","    try:\n","        audio, sr = librosa.load(file_path, sr=None, duration=10)  # Load 10 sec max\n","        mfccs = librosa.feature.mfcc(y=audio, sr=sr, n_mfcc=13).T\n","        padded_mfccs = np.pad(mfccs, ((0, max_length - len(mfccs)), (0, 0)), mode=\"constant\") if len(mfccs) < max_length else mfccs[:max_length]\n","        return np.expand_dims(padded_mfccs, axis=0)  # Reshape for model\n","    except Exception as e:\n","        print(f\"❌ Error processing audio: {e}\")\n","        return None\n","\n","# ✅ Home route\n","@app.route(\"/\")\n","def home():\n","    return render_template(\"index.html\")  # Ensure index.html is in the templates folder\n","\n","# ✅ File upload & prediction route\n","@app.route(\"/predict\", methods=[\"POST\"])\n","def predict():\n","    if \"file\" not in request.files:\n","        return jsonify({\"error\": \"No file uploaded\"}), 400\n","\n","    file = request.files[\"file\"]\n","    if file.filename == \"\" or not allowed_file(file.filename):\n","        return jsonify({\"error\": \"Invalid file type\"}), 400\n","\n","    # Save uploaded file\n","    filename = secure_filename(file.filename)\n","    file_path = os.path.join(app.config[\"UPLOAD_FOLDER\"], filename)\n","    file.save(file_path)\n","\n","    # Preprocess & predict\n","    audio_features = preprocess_audio(file_path)\n","    if audio_features is None:\n","        return jsonify({\"error\": \"Error processing audio\"}), 500\n","\n","    prediction = model.predict(audio_features)\n","    predicted_class = np.argmax(prediction, axis=1)[0]\n","    confidence_fake = float(prediction[0][1])\n","    confidence_real = float(prediction[0][0])\n","\n","    result = {\"prediction\": \"Fake\" if predicted_class == 1 else \"Real\", \"confidence_fake\": confidence_fake, \"confidence_real\": confidence_real}\n","    return jsonify(result)\n","\n","# ✅ Flask app runs properly on Render\n","if __name__ == \"__main__\":\n","    app.run(host=\"0.0.0.0\", port=5000, debug=False)\n"]}]}